//1)nice problem we have to again just go to the basics and figure that from my current state 
//  i have to see what is the best length of subsequence in decreasing order that i can get.
//2)Now the answer can be starting from any pos as any pos can be the starting pos.

// FOR BETTER SOL SCROLL DOWN
vll arr;
ll n;
vll dp;
ll rec(ll pos){
    if(pos>=n){
        return 0;
    }
    if(dp[pos]!=-1) return dp[pos];
    ll ma=1;
    forab(i,pos,n,1){
        if(arr[pos]<arr[i])
            ma=max(rec(i)+1,ma);
    }
    return dp[pos]=ma;
}

int main()
{fast;
    read(n);
    arr=vll(n);
    dp=vll(n,-1);
    forn(i,n){
        read(arr[i]);
    }
    ll ma=0;
    forn(i,n){
        ma=max(rec(i),ma);
    }
    cout<<ma;
}

//Arguably the better way to solve this problem --(just do some dp stuff too ,no needed in this prob as easy constraints)
                                                 | 
                                              <--|   
//here I just want my function to return the max possible increasing subsequence from that starting point and every number 
//which is greater than num(previos max) we take it or leave it.
ll n;
vll arr;
ll rec(ll pos,ll num){
    if(pos>=n)
        return 0;
    ll ma;
    if(arr[pos]>num)
        ma=max(rec(pos+1,arr[pos])+1,rec(pos+1,num));
    else
        ma=rec(pos+1,num);
    return ma;
}
int main(){
        read(n);
        arr=vll(n);
        read(arr,n);
       cout<< rec(0,0);
    }
